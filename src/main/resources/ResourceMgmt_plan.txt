Little about the interaction design
====================================================

End user-------------->Login.jsp----<<New User>>----->Resgistration.jsp		
					|					|				MainView.jsp(secured)
					|					|					|
				      \|/					|				      /|\
					|					|					|
				Spring Security filter------------ |------------------------------
					|					|
					|					|
					|				      \|/
					|					|
					|----------------<-------------
					|
					|
				ResourcesController---------ResourcesService----------ResurcesDAO


/resourceMgmt/users [POST] registers a new user.
/resourceMgmt/users/{user-id} [GET] fetches details of a registered user
/resourceMgmt/users/{user-id} [PUT] edit profile of a registered user

(Need details about FB and LinkedIn log-in API)

===================================================================
Some syntax
	--declare _rollback_flag int default 0;
	--declare continue handler for sqlexception 
	--	set _rollback_flag = 1;	
	--if _rollback_flag then
	--	rollback;
	--else
		commit;
	--end if;
		
=======================================================================
back-end details


create database resourcemgmt;
use resourcemgmt;

set autocommit = 0;

drop table users;
create table users (
	username varchar(12) not null,
	password varchar(32) not null,
	primary key(username)
	) engine=InnoDB;

drop table authorities;
create table authorities (
	username varchar(12) not null,
	authority varchar(10) not null,
	foreign key(username) references users(username)
	) engine=InnoDB;

drop table user_details;
create table user_details(
	fName varchar(30) not null,
	mName varchar(30) not null,
	lName varchar(30) not null,
	username varchar(12) not null,
	email varchar(30) not null,
	country varchar(30) not null,
	city varchar(30) not null,
	province varchar(30) not null,
	zip varchar(10) not null,
	contact varchar(15) not null,
	profilePic longblob,
	foreign key(username) references users(username)
	) engine=InnoDB;






drop procedure registerUser;		
delimiter //
create procedure registerUser(IN _username varchar(12), 
						IN _pwd varchar(32),
						IN _authority varchar(10),
						IN _fName varchar(30),
						IN _mName varchar(30),
						IN _lName varchar(30),
						IN _email varchar(30), 
						IN _country varchar(30), 
						IN _city varchar(30), 
						IN _province varchar(30), 
						IN _zip varchar(10),
						IN _contact varchar(15),
						IN _profilePic longblob						
						)
begin 
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;



	start transaction;
		insert into users(username, password) values(_username, md5(_pwd));
		insert into authorities (username, authority) values(_username, _authority);
		insert into user_details (username, fName, mName, lName, email, country, city, province, zip, contact) 
			values(_username, _fName, _mName, _lName, _email, _country, _city, _province, _zip, _contact);
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if; 
	commit;


end//
delimiter ;



drop procedure updateUser;
delimiter //
create procedure updateUser(IN _username varchar(12), 
						IN _fName varchar(30),
						IN _mName varchar(30),
						IN _lName varchar(30),
						IN _email varchar(30), 
						IN _country varchar(30), 
						IN _city varchar(30), 
						IN _province varchar(30), 
						IN _zip varchar(10),
						IN _contact varchar(15),
						IN _profilePic longblob)
begin 

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;
	
	update user_details
		set username = _username, fName = _fName, mName = _mName, lName = _lName, email = _email, country = _country,
			city = _city, province = _province, zip = _zip, contact = _contact, profilePic = _profilePic
			where username = _username;
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if;
					
end//
delimiter ;

drop procedure updatePassword;
delimiter //
create procedure updatePassword(IN _username varchar(12), 
						IN _pwd varchar(32))
begin 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;
	
	update users
		set password = md5(_pwd)
			where username = _username;
end//
delimiter ;


drop procedure getUserDetails;
delimiter //
create procedure getUserDetails(IN _username varchar(12),
						OUT _fName varchar(30),
						OUT _mName varchar(30),
						OUT _lName varchar(30),
						OUT _email varchar(30), 
						OUT _country varchar(30), 
						OUT _city varchar(30), 
						OUT _province varchar(30), 
						OUT _zip varchar(10),
						OUT _contact varchar(15)
						

)
begin 
	select fName, mName, lName, email, country, city, province, zip, contact into  
		_fName, _mName, _lName, _email, _country, _city, _province, _zip, _contact
			from user_details
			where username = _username;
end//
delimiter ;



drop procedure getUserProfilePic;
delimiter //
create procedure getUserProfilePic(IN _username varchar(12),
						OUT _profilePic longblob
)
begin 
	select profilePic into _profilePic
		from user_details
			where username = _username;
end//
delimiter ;

