Little about the interaction design
====================================================

End user-------------->Login.jsp----<<New User>>----->Resgistration.jsp		
					|					|				MainView.jsp(secured)
					|					|					|
				      \|/					|				      /|\
					|					|					|
				Spring Security filter------------ |------------------------------
					|					|
					|					|
					|				      \|/
					|					|
					|----------------<-------------
					|
					|
				ResourcesController---------ResourcesService----------ResurcesDAO


/resourceMgmt/users [POST] registers a new user.
/resourceMgmt/users/{user-id} [GET] fetches details of a registered user
/resourceMgmt/users/{user-id} [PUT] edit profile of a registered user

(Need details about FB and LinkedIn log-in API)

===================================================================
Some syntax
	--declare _rollback_flag int default 0;
	--declare continue handler for sqlexception 
	--	set _rollback_flag = 1;	
	--if _rollback_flag then
	--	rollback;
	--else
		commit;
	--end if;



drop table skills;
create table skills(
	skill varchar(100) not null,
	skillId smallint
) engine=InnoDB; 

insert into skills values(1, "HTML");
insert into skills values(2, "JavaScript");
insert into skills values(3, "CSS");
insert into skills values(4, "JAVA");
insert into skills values(5, "PHP");
insert into skills values(6, "RUBY");
insert into skills values(7, "JAVA-Based-Scripts");
insert into skills values(8, "C#");
insert into skills values(9, "C");
insert into skills values(10, "C++");
insert into skills values(11, "MySQL");
insert into skills values(12, "Oracle");
insert into skills values(13, "IBM Products");
insert into skills values(14, "Others");


create table user_skills(
	username varchar(12) not null, 
	skillId smallint,
	primary key()username, skillId),
	foreign key(username) references users(username),
	foreign key(skillId) references skills(skillId)
) engine=innoDB;
		
=======================================================================
back-end details


create database resourcemgmt;
use resourcemgmt;

set autocommit = 0;

drop table users;
create table users (
	username varchar(12) not null,
	password varchar(32) not null,
	resetpwd smallint default 0,
	primary key(username)
	) engine=InnoDB;

drop table authorities;
create table authorities (
	username varchar(12) not null,
	authority varchar(10) not null,
	foreign key(username) references users(username)
	) engine=InnoDB;

drop table user_details;
create table user_details(
	fName varchar(30) not null,
	mName varchar(30) not null,
	lName varchar(30) not null,
	username varchar(12) not null,
	email varchar(60) not null,
	skill varchar(120) not null,
	country varchar(30) not null,
	city varchar(30) not null,
	province varchar(30) not null,
	zip varchar(10) not null,
	contact varchar(15) not null,
	profilePic longblob,
	foreign key(username) references users(username)
	) engine=InnoDB;

alter table user_details ADD INDEX city_index (city);



drop procedure findUserByCity;		
delimiter //
create procedure findUserByCity(IN _city varchar(30))
	begin
		select * from user_details where city = _city;
	end//
delimiter ;

drop procedure findUserBySkill;		
delimiter //
create procedure findUserBySkill(IN _skill varchar(120))
	begin
		select * from user_details where skill like concat('%', _skill , '%');
	end//
delimiter ;


drop procedure registerUser;		
delimiter //
create procedure registerUser(IN _username varchar(12), 
						IN _pwd varchar(32),
						IN _authority varchar(10),
						IN _fName varchar(30),
						IN _mName varchar(30),
						IN _lName varchar(30),
						IN _skill varchar(120),
						IN _email varchar(30), 
						IN _country varchar(30), 
						IN _city varchar(30), 
						IN _province varchar(30), 
						IN _zip varchar(10),
						IN _contact varchar(15),
						IN _profilePic longblob						
						)
begin 
	
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		rollback;
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;



	start transaction;
		insert into users(username, password) values(_username, md5(_pwd));
		insert into authorities (username, authority) values(_username, _authority);
		insert into user_details (username, fName, mName, lName, email, skill, country, city, province, zip, contact) 
			values(_username, _fName, _mName, _lName, _email, _skill, _country, _city, _province, _zip, _contact);
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if; 
	commit;


end//
delimiter ;



drop procedure updateUser;
delimiter //
create procedure updateUser(IN _username varchar(12), 
						IN _fName varchar(30),
						IN _mName varchar(30),
						IN _lName varchar(30),
						IN _email varchar(30),
						IN _skill varchar(120),
						IN _country varchar(30), 
						IN _city varchar(30), 
						IN _province varchar(30), 
						IN _zip varchar(10),
						IN _contact varchar(15),
						IN _profilePic longblob)
begin 

	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;
	
			
		if _fName is not null then
			update user_details
				set fName = _fName where username = _username;
		end if;
		
		if _mName is not null then
			update user_details
				set mName = _mName where username = _username;
		end if;
		
		if _lName is not null then
			update user_details
				set lName = _lName where username = _username;
		end if;
		
		if _email is not null then
			update user_details
				set email = _email where username = _username;
		end if;
		
		if _skill is not null then
			update user_details
				set skill = _skill where username = _username;
		end if;
		
		if _country is not null then
			update user_details
				set country = _country where username = _username;
		end if;
		
		if _city is not null then
			update user_details
				set city = _city where username = _username;
		end if;
		
		if _province is not null then
			update user_details
				set province = _province where username = _username;
		end if;
		
		if _zip is not null then
			update user_details
				set zip = _zip where username = _username;
		end if;
		
		if _contact is not null then
			update user_details
				set contact = _contact where username = _username;
		end if;
		
		
			
		if _profilePic is not null then
			update user_details
				set profilePic = _profilePic where username = _username;
		end if;
					
end//
delimiter ;

drop procedure updatePassword;
delimiter //
create procedure updatePassword(IN _username varchar(12), 
						IN _pwd varchar(32), IN _resetpwd smallint)
begin 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION
	BEGIN
		GET DIAGNOSTICS CONDITION 1 @sqlstate = RETURNED_SQLSTATE, 
 		@errno = MYSQL_ERRNO, @text = MESSAGE_TEXT;
		SET @full_error = CONCAT("ERROR ", @errno, " (", @sqlstate, "): ", @text);
		SELECT @full_error;
	END;
	
	update users
		set password = md5(_pwd), resetpwd = _resetpwd
			where username = _username;
end//
delimiter ;


drop procedure getUserDetails;
delimiter //
create procedure getUserDetails(IN _username varchar(12),
						OUT _fName varchar(30),
						OUT _mName varchar(30),
						OUT _lName varchar(30),
						OUT _email varchar(30), 
						OUT _skill varchar(120),
						OUT _country varchar(30), 
						OUT _city varchar(30), 
						OUT _province varchar(30), 
						OUT _zip varchar(10),
						OUT _contact varchar(15)
						

)
begin 
	select fName, mName, lName, email, skill, country, city, province, zip, contact into  
		_fName, _mName, _lName, _email, _skill, _country, _city, _province, _zip, _contact
			from user_details
			where username = _username;
end//
delimiter ;



drop procedure getUserProfilePic;
delimiter //
create procedure getUserProfilePic(IN _username varchar(12),
						OUT _profilePic longblob
)
begin 
	select profilePic into _profilePic
		from user_details
			where username = _username;
end//
delimiter ;

drop procedure isPwdReset;
delimiter //
create procedure isPwdReset(IN _username varchar(12), OUT _resetpwd smallint)
begin 
		select resetpwd into _resetpwd from users
			where username = _username;
end//
delimiter ;

